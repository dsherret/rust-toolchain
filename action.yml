name: rust-toolchain.toml install
author: David Tolnay, David Sherret
description: Install the Rust toolchain via a rust-toolchain.toml file
branding:
  icon: activity
  color: purple

outputs:
  cachekey:
    description: A short hash of the rustc version, appropriate for use as a cache key. "20220627a831"
    value: ${{steps.rustc-version.outputs.cachekey}}
  name:
    description: Rustup's name for the selected version of the toolchain. "1.62.0"  # suitable for use with `cargo +${{steps.toolchain.outputs.name}}`
    value: ${{steps.parse.outputs.toolchain}}

runs:
  using: composite
  steps:
    - id: ensure-toolchain-file
      run: |
        if [[ -f "rust-toolchain" || -f "rust-toolchain.toml" ]]
        then
          echo "Found toolchain file"
        else
          echo "No rust-toolchain or rust-toolchain.toml file found in repo."
          echo "Please ensure the repo is checked out first or add this file."
          echo "If you don't want this file, then please use https://github.com/dtolnay/rust-toolchain"
          exit 1
        fi
      shell: bash

    # `rustup show` will install, but it would be better to
    # have a specific command: https://github.com/rust-lang/rustup/issues/2686
    #
    # Note: GitHub actions will automatically use the Rust version specified in
    # the root directory, so we can skip the `rustup show active-toolchain`
    - run: |
        : install rustup if needed
        if ! command -v rustup &>/dev/null; then
          echo "Installing rustup"
          curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL "https://sh.rustup.rs" | sh -s -- --default-toolchain none --profile minimal -y
          source "${CARGO_HOME:-$HOME/.cargo}/env"
          echo "${CARGO_HOME:-$HOME/.cargo}/bin" >> $GITHUB_PATH
          rustup show active-toolchain
        else
          echo "Configuring existing rustup"
          rustup set profile minimal
          rustup component remove rust-docs || true
          rustup component remove rustfmt || true
          rustup component remove clippy || true
        fi
      if: runner.os != 'Windows'
      shell: bash

    - run: | 
        : set profile minimal
        rustup set profile minimal
        rustup component remove rust-docs || true
        rustup component remove rustfmt || true
        rustup component remove clippy || true
      if: runner.os == 'Windows'
      shell: bash

    - name: create cache key
      id: rustc-version
      run: |
        : create cachekey
        DATE=$(rustc --version --verbose | sed -ne 's/^commit-date: \(20[0-9][0-9]\)-\([01][0-9]\)-\([0-3][0-9]\)$/\1\2\3/p')
        HASH=$(rustc --version --verbose | sed -ne 's/^commit-hash: //p')
        echo "cachekey=$(echo $DATE$HASH | head -c12)" >> $GITHUB_OUTPUT
      shell: bash

    - run: |
        : disable incremental compilation
        if [ -z "${CARGO_INCREMENTAL+set}" ]; then
          echo CARGO_INCREMENTAL=0 >> $GITHUB_ENV
        fi
      shell: bash

    - run: |
        : enable colors in Cargo output
        if [ -z "${CARGO_TERM_COLOR+set}" ]; then
          echo CARGO_TERM_COLOR=always >> $GITHUB_ENV
        fi
      shell: bash

    - run: |
        : enable Cargo sparse registry
        # except on 1.66 and 1.67, on which it is unstable
        if [ -z "${CARGO_REGISTRIES_CRATES_IO_PROTOCOL+set}" -o -f "${{runner.temp}}"/.implicit_cargo_registries_crates_io_protocol ]; then
          touch "${{runner.temp}}"/.implicit_cargo_registries_crates_io_protocol || true
          if rustc --version --verbose | (! grep -q '^release: 1\.6[67]\.'); then
            echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse >> $GITHUB_ENV
          else
            echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=git >> $GITHUB_ENV
          fi
        fi
      shell: bash

    - run: rustc --version --verbose
      shell: bash
